name: Build ticker dredge_heds.json

on:
  workflow_dispatch:
  schedule:
    - cron: "*/15 * * * *"  # every 15 minutes

permissions:
  contents: write

concurrency:
  group: ticker-publish
  cancel-in-progress: true

jobs:
  build-and-publish:
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps (ticker)
        run: |
          python -m pip install --upgrade pip
          if [[ -f requirements.txt ]]; then
            pip install -r requirements.txt
          else
            pip install feedparser requests python-dateutil beautifulsoup4 json5
          fi

      - name: Build ticker JSON
        run: |
          # Script lives at repo root /scripts; headlines.json is at repo root.
          mkdir -p newsriver/newsriver
          python scripts/fetch_tickerlines.py --in ./headlines.json --out ./newsriver/newsriver/dredge_heds.json

      - name: Validate dredge_heds.json
        uses: actions/github-script@v7
        with:
          script: |
            // 'core' is provided by github-script; DON'T redeclare it.
            const fs = require('fs');

            const p = 'newsriver/newsriver/dredge_heds.json';
            if (!fs.existsSync(p)) {
              core.setFailed(`ERROR: ${p} not found`);
              return;
            }

            let data;
            try {
              data = JSON.parse(fs.readFileSync(p, 'utf8'));
            } catch (e) {
              core.setFailed(`ERROR: cannot parse ${p}: ${e.message}`);
              return;
            }

            const items = Array.isArray(data?.items) ? data.items : [];
            if (!Array.isArray(items)) {
              core.setFailed('ERROR: items is not an array');
              return;
            }
            if (items.length === 0) {
              core.warning('items[] is empty; ticker will show "Loading…" from warm cache');
            }

            const n = Math.min(items.length, 3);
            for (let i = 0; i < n; i++) {
              const it = items[i] || {};
              const url = typeof it.url === 'string' ? it.url.trim() : '';
              const text = (it.display || it.text || it.hyped || it.title || '').toString().trim();
              if (!url) { core.setFailed(`item ${i} missing valid url`); return; }
              if (!text) { core.setFailed(`item ${i} missing display/text/title`); return; }
            }

            // Print a short preview for sanity
            const preview = JSON.stringify(data).slice(0, 400);
            core.info(`Validation OK: ${items.length} items. Preview: ${preview}${preview.length===400?'…':''}`);

      - name: Commit and push if changed
        run: |
          set -e
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add newsriver/newsriver/dredge_heds.json
          if git diff --cached --quiet; then
            echo "No changes to commit."
          else
            git commit -m "ticker: update dredge_heds.json [ci skip]"
            git push
          fi

      # Optional: sanity-check that GitHub Pages is serving the new JSON
      - name: Check GitHub Pages availability (retry briefly)
        env:
          PAGES_URL: https://mypybite.github.io/newsriver/newsriver/dredge_heds.json
        run: |
          echo "Checking $PAGES_URL"
          for i in {1..6}; do
            code=$(curl -s -o /dev/null -w "%{http_code}" "$PAGES_URL?cb=$(date +%s)")
            echo "Attempt $i: HTTP $code"
            if [[ "$code" == "200" ]]; then
              echo "OK: GitHub Pages is serving the file."
              curl -s "$PAGES_URL?cb=$(date +%s)" | head -c 200 && echo
              exit 0
            fi
            sleep 10
          done
          echo "WARNING: GitHub Pages not returning 200 yet. It may still propagate."
          exit 0
