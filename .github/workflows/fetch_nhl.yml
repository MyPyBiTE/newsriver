name: build_nhl

on:
  schedule:
    # Every 10 minutes from 11:00–18:59 ET (16–23 UTC)
    - cron: '*/10 16-23 * * *'
    # Every 10 minutes from 19:00–02:59 ET (00–07 UTC)
    - cron: '*/10 0-7 * * *'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  fetch:
    runs-on: ubuntu-latest
    env:
      TZ: America/Toronto  # set a stable local day for "today"
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Build nhl.json
        run: |
          python - <<'PY'
          import os, json, time, urllib.request, datetime as dt

          # --- helpers ---
          def get(url, timeout=10):
              req = urllib.request.Request(url, headers={"User-Agent":"mpb/1.0"})
              with urllib.request.urlopen(req, timeout=timeout) as r:
                  return json.loads(r.read().decode("utf-8"))

          def normalize_scoreboard(d):
              games = d.get("games", [])
              if not games and "gameWeek" in d:
                  for day in d["gameWeek"]:
                      games.extend(day.get("games", []))
              out=[]
              for g in games:
                  gamePk = g.get("id") or g.get("gamePk")
                  start  = g.get("startTimeUTC") or g.get("gameDate")
                  away   = g.get("awayTeam") or g.get("teams",{}).get("away",{})
                  home   = g.get("homeTeam") or g.get("teams",{}).get("home",{})
                  out.append({
                      "gamePk": gamePk,
                      "gameDate": start,
                      "status": {"abstractGameState": g.get("gameState") or g.get("gameStatus","")},
                      "teams": {
                        "away": {"team":{"abbreviation": (away.get("abbrev") or away.get("team",{}).get("abbreviation") or "AWAY")},
                                 "score": away.get("score")},
                        "home": {"team":{"abbreviation": (home.get("abbrev") or home.get("team",{}).get("abbreviation") or "HOME")},
                                 "score": home.get("score")}
                      },
                      "linescore": {
                        "currentPeriod": (g.get("periodDescriptor",{}) or {}).get("number") or g.get("period"),
                        "currentPeriodTimeRemaining": (g.get("clock",{}) or {}).get("timeRemaining")
                      }
                  })
              return {"dates":[{"games":out}]} if out else {"dates":[]}

          def iso_date_local_eastern(now_utc):
              # simple Eastern shift without extra deps
              off = 4 if time.gmtime().tm_isdst else 5   # EDT=4, EST=5
              loc = now_utc - dt.timedelta(hours=off)
              return f"{loc.year:04d}-{loc.month:02d}-{loc.day:02d}"

          def has_games(payload):
              return bool(payload.get("dates") and payload["dates"][0].get("games"))

          root = os.getcwd()
          out_path = os.path.join(root, "nhl.json")

          prev = {"dates":[]}
          if os.path.exists(out_path):
              try:
                  with open(out_path,"r",encoding="utf-8") as f:
                      prev = json.load(f)
              except:
                  pass

          now_utc = dt.datetime.utcnow().replace(tzinfo=dt.timezone.utc)

          # 1) Try scoreboard/now
          wip = {"dates":[]}
          try:
              wip = normalize_scoreboard(get("https://api-web.nhle.com/v1/scoreboard/now"))
          except Exception:
              wip = {"dates":[]}

          # 2) Fallback to scoreboard/<local ET date>
          if not has_games(wip):
              try:
                  local_date = iso_date_local_eastern(now_utc)
                  d = get(f"https://api-web.nhle.com/v1/scoreboard/{local_date}")
                  wip = normalize_scoreboard(d)
              except Exception:
                  wip = {"dates":[]}

          # 3) Safeguard: Don't overwrite with empty during the evening;
          #    keep last good file. Reset to empty after ~4am ET if still empty.
          final = wip if has_games(wip) else prev
          try:
              off = 4 if time.gmtime().tm_isdst else 5
              local_hour = (now_utc - dt.timedelta(hours=off)).hour
              if local_hour >= 4 and not has_games(wip):
                  final = {"dates": []}
          except:
              pass

          with open(out_path, "w", encoding="utf-8") as f:
              json.dump(final, f, separators=(",",":"))

          print("Wrote nhl.json with",
                (len(final.get("dates",[])) and len(final["dates"][0].get("games",[]))) or 0,
                "games")
          PY

      - name: Commit & push if changed
        run: |
          if [[ -n "$(git status --porcelain nhl.json)" ]]; then
            git config user.name "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git add nhl.json
            git commit -m "chore: update nhl.json [skip ci]"
            git push
          else
            echo "No changes."
          fi
