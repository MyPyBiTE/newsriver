name: Build Headlines JSON

on:
  workflow_dispatch:
  schedule:
    - cron: "*/12 * * * *"   # every 12 minutes (UTC)
  push:
    branches: [ main ]
    paths:
      - "scripts/fetch_headlines.py"
      - "requirements.txt"
      - ".github/workflows/build_headlines.yml"

concurrency:
  group: build-headlines
  cancel-in-progress: true

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      TZ: "America/Toronto"
      HEADLINES_OUT_DIR: "newsriver"
      HEADLINES_OUT_FILE: "newsriver/headlines.json"
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install dependencies (if any)
        run: |
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi

      - name: Prepare output folder
        run: |
          mkdir -p "$HEADLINES_OUT_DIR"

      - name: Generate headlines.json
        run: |
          set -e
          python3 scripts/fetch_headlines.py --out "$HEADLINES_OUT_FILE"
        shell: bash

      - name: Basic validation (non-empty & JSON)
        run: |
          set -e
          test -s "$HEADLINES_OUT_FILE"
          python - << 'PY'
          import json, os, sys
          p = os.environ["HEADLINES_OUT_FILE"]
          with open(p, "r", encoding="utf-8") as f:
              data = json.load(f)
          # Accept array or { "items": [...] }
          if isinstance(data, list):
              items = data
          elif isinstance(data, dict) and isinstance(data.get("items"), list):
              items = data["items"]
          else:
              raise SystemExit("Invalid top-level JSON shape. Must be array or { items: [...] }")
          if not items:
              raise SystemExit("JSON has zero items.")
          # Minimal schema sanity: title and link present on first item
          first = items[0]
          if not isinstance(first, dict) or "title" not in first or "link" not in first:
              raise SystemExit("First item missing required fields: title, link")
          print("OK: valid JSON and schema. Count:", len(items))
          PY

      - name: Show summary (first item)
        run: |
          python - << 'PY'
          import json, os
          p = os.environ["HEADLINES_OUT_FILE"]
          with open(p, "r", encoding="utf-8") as f:
              data = json.load(f)
          items = data if isinstance(data, list) else data.get("items", [])
          first = items[0] if items else {}
          print("Built:", p)
          print("First title:", first.get("title", "<none>"))
          print("First link:", first.get("link", "<none>"))
          PY

      - name: Commit & push if changed
        run: |
          set -euo pipefail

          # Avoid dubious ownership errors
          git config --global --add safe.directory "$GITHUB_WORKSPACE"

          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          # Rebase on latest and auto-stash any local edits made by prior steps
          git pull --rebase --autostash

          # Only commit if the output file actually changed
          if ! git diff --quiet -- "$HEADLINES_OUT_FILE"; then
            git add "$HEADLINES_OUT_FILE"
            git commit -m "chore(headlines): refresh headlines.json [skip ci]"
            git push || { echo "Push failed, retrying once..."; sleep 2; git push; }
          else
            echo "No changes to commit."
          fi
